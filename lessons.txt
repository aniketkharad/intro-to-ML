Two layer nl with one hidden dense layer    

hidden = keras.layers.Dense(units=2, input_shape[3])
output = keras.layers.Dense(units=1)
model = tf.keras.Sequential([hidden, output])

MNIST data Set 

tf.keras.layers.Flatten(input_shape = (28, 28, 1))
tf.keras.layers.Dense(128, activation=tf.nn.relu)
tf.keras.layers.Dense(10,activation=tf.nn.softman)

CAT VS DOG MICROOFT AZURE dataset

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

MOBILENET pretrained dataest

CLASSIFIER_URL = "url"
IMAGE_RES = 224
model = tf.kerasa.Sequential([
	hub.KerasLayer(CLASSIFIER_URL, input_shape=(IMAGE_RERS, IMAGE_RES, 3))
layeres.Dense(2, activation='softmax')
])
model.compile(
	optimezer='adam',
	loss='sparse_categorical_crossentropy,
	metrics=['accuracy'])
EPOCHS = 6
history=model.fit(train_batches,epochs=EPOCHS, validation_data=validation_batches)